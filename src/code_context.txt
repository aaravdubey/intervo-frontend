// File: components/CSVTable.jsx
import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import Papa from "papaparse";
import axios from "axios";

const CSVTable = () => {
  const location = useLocation();
  const { batch } = location.state;
  const [csvData, setCsvData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCSVData = async () => {
      if (batch.csvFile) {
        setLoading(true);
        setError(null);
        try {
          const csvContent = atob(batch.csvFile);
          Papa.parse(csvContent, {
            header: true,
            complete: (result) => {
              setCsvData(result.data);
              setLoading(false);
            },
            error: (err) => {
              setError("Error parsing CSV file");
              setLoading(false);
            },
          });
        } catch (err) {
          setError("Error decoding CSV file");
          setLoading(false);
        }
      }
    };

    fetchCSVData();
  }, [batch.csvFile]);

  const handleAutomate = async () => {
    try {
      const emails = csvData.map((row) => row.email);
      const response = await axios.post("http://localhost:3000/api/sendEmails", { emails });
      console.log(response.data);
    } catch (error) {
      console.error("Error sending emails:", error);
      setError("Error sending emails");
    }
  };

  if (loading) {
    return <p>Loading CSV data...</p>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  return (
    <div className="px-4 lg:px-28 my-10 text-gray-700">
      <h2 className="text-3xl font-bold text-center my-8">
        {batch.companyName} Interview Batch Details
      </h2>
      <button
        onClick={handleAutomate}
        className="bg-blue-500 text-white px-4 py-2 rounded mb-4"
      >
        Automate Email Sending
      </button>
      
      <table className="text-left w-full border-collapse">
        <thead>
          <tr>
            {csvData.length > 0 &&
              Object.keys(csvData[0]).map((key) => (
                <th className="border px-4 py-2" key={key}>
                  {key}
                </th>
              ))}
          </tr>
        </thead>
        <tbody>
          {csvData.map((row, index) => (
            <tr key={index}>
              {Object.values(row).map((value, i) => (
                <td className="border px-4 py-2" key={i}>
                  {value}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CSVTable;

// File: components/header1.jsx
import React, { useState } from "react";
import { Link } from "react-router-dom";
import Logo from "../assets/logo.png";

const Header1 = ({ isAuthenticated, setIsAuthenticated }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    localStorage.removeItem('companyName');
    setIsAuthenticated(false);
  };

  return (
    <header>
      <nav className="bg-white border-gray-200 px-4 lg:px-6 py-2.5">
        <div className="flex flex-wrap justify-between items-center mx-auto max-w-screen-xl">
          <Link to="/" className="flex items-center">
            <img src={Logo} className="mr-3 h-6 sm:h-16" alt="Flowbite Logo" />
          </Link>
          <div className="flex items-center lg:order-2">
            {!isAuthenticated ? (
              <Link
                to="/login"
                className="text-white bg-gray-800 hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 font-medium rounded text-sm px-4 lg:px-5 py-2 lg:py-2.5 mr-2"
              >
                Login / Signup
              </Link>
            ) : (
              <>
                <button
                  className="text-white bg-gray-800 hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 font-medium rounded text-sm px-4 lg:px-5 py-2 lg:py-2.5 mr-2"
                  onClick={handleLogout}
                >
                  Logout
                </button>
              </>
            )}
            <button
              onClick={toggleMenu}
              type="button"
              className="inline-flex items-center p-2 ml-1 text-sm text-gray-500 rounded-lg lg:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200"
              aria-controls="mobile-menu-2"
              aria-expanded={isMenuOpen}
            >
              <span className="sr-only">Open main menu</span>
              <svg
                className={`w-6 h-6 ${isMenuOpen ? "hidden" : ""}`}
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                  clipRule="evenodd"
                ></path>
              </svg>
              <svg
                className={`w-6 h-6 ${isMenuOpen ? "" : "hidden"}`}
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                  clipRule="evenodd"
                ></path>
              </svg>
            </button>
          </div>
          <div
            className={`${
              isMenuOpen ? "block" : "hidden"
            } justify-between items-center w-full lg:flex lg:w-auto lg:order-1`}
            id="mobile-menu-2"
          >
            <ul className="flex flex-col mt-4 font-medium lg:flex-row lg:space-x-8 lg:mt-0">
              <li>
                <Link
                  to="/"
                  className="block py-2 pr-4 pl-3 text-white rounded bg-primary-700 lg:bg-transparent lg:text-primary-700 lg:p-0"
                  aria-current="page"
                >
                  Home
                </Link>
              </li>
              {isAuthenticated && (
                <>
                  <li>
                    <Link
                      to="/form"
                      className="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0"
                    >
                      Upload Form
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/card"
                      className="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0"
                    >
                      View Form
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/profile"
                      className="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0"
                    >
                      Manage Profile
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/contact"
                      className="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0"
                    >
                      Contact
                    </Link>
                  </li>
                </>
              )}
            </ul>
          </div>
        </div>
      </nav>
    </header>
  );
};

export default Header1;

// File: components/InterviewBatchCard.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import InterviewIcon from "../assets/interview-icon.png";

const InterviewBatchCard = () => {
  const [interviewBatches, setInterviewBatches] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchInterviewBatches = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get("http://localhost:3000/api/interviewBatch", {
          headers: {
            Authorization: token
          }
        });
        setInterviewBatches(response.data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching interview batches:", error);
        setError("Failed to fetch interview batches: " + error.message);
        setLoading(false);
      }
    };

    fetchInterviewBatches();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="flex flex-wrap justify-center gap-4 ">
      <h2 className="text-3xl font-bold text-center my-8">Interview Batches</h2>
      <div className="w-full mb-8"></div>
      {interviewBatches.length === 0 && (
        <div className="text-center text-gray-500">No interview batches found.</div>
      )}
      {interviewBatches.map((batch, index) => (
        <div
          key={index}
          className="max-w-xs bg-white hover:bg-light-blue cursor-pointer rounded overflow-hidden shadow-lg transition duration-300 ease-in-out transform hover:scale-105"
        >
          <a href="#">
            <img
              className="rounded saturate-50 w-full h-48 object-cover"
              src="https://verpex.com/assets/uploads/images/blog/Python-good-for-machine-learning.webp?v=1681274267"
              alt="Interview Batch"
            />
          </a>
          <div className="py-5 px-2">
            <a href="#">
              <h5 className="mb-2 text-xl font-bold tracking-tight text-gray-900">{batch.companyName}</h5>
            </a>
            <p className="mb-1 font-normal text-sm text-gray-700">Total Candidates Required: {batch.totalCandidatesRequired}</p>
            <p className="mb-1 font-normal text-sm text-gray-700">Domains: {batch.domains}</p>
            <p className="mb-1 font-normal text-sm text-gray-700">Skills: {batch.skills.join(", ")}</p>
            <p className="mb-1 font-normal text-sm text-gray-700">Interview Types: {batch.interviewTypes.join(", ")}</p>
            <p className="mb-1 font-normal text-sm text-gray-700">Deadline: {new Date(batch.deadline).toLocaleDateString()}</p>
            {batch.note && (
              <p className="mb-1 font-normal text-sm text-gray-700">Note: {batch.note}</p>
            )}
            {batch.csvFile && (
              <a
                href={`data:text/csv;base64,${batch.csvFile}`}
                download={`${batch.companyName}_interview_batch.csv`}
                className="inline-flex items-center px-4 py-2.5 text-sm font-medium text-center text-white bg-primary-blue rounded hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300"
              >
                Download CSV
                <img src={InterviewIcon} className="ml-2 h-6" alt="Interview Icon" />
              </a>
            )}
            <button
              onClick={() => navigate("/csv-table", { state: { batch } })}
              className="inline-flex items-center px-4 py-2.5 mt-2 text-sm font-medium text-center text-white bg-blue-600 rounded hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300"
            >
              View More Details
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default InterviewBatchCard;

// File: components/InterviewBatchForm.jsx
import React, { useState } from "react";
import DatePicker from "react-datepicker";
import axios from "axios";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import "react-datepicker/dist/react-datepicker.css";

const API_BASE = 'http://localhost:3000';

const InterviewBatchForm = () => {
  const [formData, setFormData] = useState({
    companyName: localStorage.getItem('companyName') || "",
    totalCandidatesRequired: "",
    domains: "",
    skills: [],
    interviewTypes: [],
    deadline: null,
    csvFile: null,
    note: ""
  });

  const [inputValue, setInputValue] = useState("");

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setFormData({ ...formData, csvFile: file });
  };

  const handleDateChange = (date) => {
    setFormData({ ...formData, deadline: date });
  };

  const handleCheckboxChange = (event) => {
    const { value, checked } = event.target;
    setFormData((prevFormData) => {
      const updatedInterviewTypes = checked
        ? [...prevFormData.interviewTypes, value]
        : prevFormData.interviewTypes.filter((type) => type !== value);
      return { ...prevFormData, interviewTypes: updatedInterviewTypes };
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formDataForSubmission = new FormData();
    formDataForSubmission.append("companyName", formData.companyName);
    formDataForSubmission.append("totalCandidatesRequired", formData.totalCandidatesRequired);
    formDataForSubmission.append("domains", formData.domains);
    formDataForSubmission.append("skills", JSON.stringify(formData.skills));
    formDataForSubmission.append("interviewTypes", JSON.stringify(formData.interviewTypes));
    formDataForSubmission.append("deadline", formData.deadline);
    formDataForSubmission.append("csvFile", formData.csvFile);
    formDataForSubmission.append("note", formData.note);

    try {
      const response = await axios.post(`${API_BASE}/api/interviewBatch`, formDataForSubmission, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.status === 201) {
        console.log("Interview batch created successfully");
        toast.success('Interview batch created successfully');
        setFormData({
          companyName: localStorage.getItem('companyName') || "",
          totalCandidatesRequired: "",
          domains: "",
          skills: [],
          interviewTypes: [],
          deadline: null,
          csvFile: null,
          note: ""
        });
        setInputValue("");
      } else {
        console.error("Failed to create interview batch", response.data.message);
        toast.error(`Failed to create interview batch: ${response.data.message}`);
      }
    } catch (error) {
      console.error("Error submitting form:", error);
      toast.error(`Error submitting form: ${error.message}`);
    }
  };

  const addTag = (e) => {
    e.preventDefault();
    if (inputValue.trim() && !formData.skills.includes(inputValue.trim())) {
      setFormData({ ...formData, skills: [...formData.skills, inputValue.trim()] });
      setInputValue("");
    }
  };

  const removeTag = (skill) => {
    setFormData({ ...formData, skills: formData.skills.filter(s => s !== skill) });
  };

  const interviewTypes = [
    { value: "Aptitude", label: "Aptitude" },
    { value: "Coding", label: "Coding" },
    { value: "Group Discussion", label: "Group Discussion" },
  ];

  return (
    <div className="max-w-xxl mx-auto px-28 mt-10 bg-white rounded-lg shadow-lg ">
      <ToastContainer />
      <h1 className="text-2xl font-bold mb-4 ">Interview Batch Form</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="flex flex-wrap -mx-3 mb-6">
          {/* Company Name */}
          <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
            <label htmlFor="companyName" className="block text-gray-700 font-bold mb-2">Company Name:</label>
            <input
              type="text"
              id="companyName"
              name="companyName"
              value={formData.companyName}
              readOnly
              className="px-4 py-2 w-full bg-gray-100 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>

          {/* Total Candidates Required */}
          <div className="w-full md:w-1/2 px-3">
            <label htmlFor="totalCandidatesRequired" className="block text-gray-700 font-bold mb-2">Total No. of Candidates Required:</label>
            <input
              type="number"
              id="totalCandidatesRequired"
              name="totalCandidatesRequired"
              value={formData.totalCandidatesRequired}
              onChange={handleInputChange}
              placeholder="Enter Total No. of Candidates Required"
              className="px-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        <div className="flex flex-wrap -mx-3 mb-6">
          {/* Domains */}
          <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
            <label htmlFor="domains" className="block text-gray-700 font-bold mb-2">Domains:</label>
            <input
              type="text"
              id="domains"
              name="domains"
              value={formData.domains}
              onChange={handleInputChange}
              placeholder="Enter Domains"
              className="px-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>

          {/* Skills */}
          <div className="w-full md:w-1/2 px-3">
            <label htmlFor="skills" className="block text-gray-700 font-bold mb-2">Skills:</label>
            <div className='flex mb-2'>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded-l-md placeholder:font-light placeholder:text-gray-500"
                name="skills"
                id="skills"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Ex: React, NodeJs, Python, etc."
              />
              <button className='bg-teal-blue text-white w-10 rounded-r-md' onClick={addTag}>+</button>
            </div>
            <div className="flex flex-wrap">
              {formData.skills.map((skill, index) => (
                <div key={index} className="bg-gray-200 p-2 m-1 rounded-md flex items-center">
                  <span className="mr-2">{skill}</span>
                  <button type="button" className="text-red-500" onClick={() => removeTag(skill)}>x</button>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="flex flex-wrap -mx-3 mb-6">
          {/* Interview Types and Deadline */}
          <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
            <span className="block text-gray-700 font-bold mb-2">Interview Types:</span>
            {interviewTypes.map((type) => (
              <div key={type.value} className="flex items-center mb-2">
                <input
                  type="checkbox"
                  id={type.value}
                  value={type.value}
                  checked={formData.interviewTypes.includes(type.value)}
                  onChange={handleCheckboxChange}
                  className="mr-2"
                />
                <label htmlFor={type.value} className="text-gray-700">{type.label}</label>
              </div>
            ))}
          </div>

          {/* Deadline */}
          <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
            <label htmlFor="deadline" className="block text-gray-700 font-bold mb-2">Deadline:</label>
            <DatePicker
              id="deadline"
              selected={formData.deadline}
              onChange={handleDateChange}
              placeholderText="Select Deadline"
              className="px-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        <div className="flex flex-wrap -mx-3 mb-6">
          {/* Upload CSV File */}
          <div className="w-full px-3 mb-6 md:mb-0">
            <label htmlFor="csvFile" className="block text-gray-700 font-bold mb-2">Upload CSV File:</label>
            <input
              type="file"
              id="csvFile"
              name="csvFile"
              onChange={handleFileChange}
              className="px-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        <div className="flex flex-wrap -mx-3 mb-6">
          {/* Note */}
          <div className="w-full px-3 mb-6 md:mb-0">
            <label htmlFor="note" className="block text-gray-700 font-bold mb-2">Note:</label>
            <textarea
              id="note"
              name="note"
              value={formData.note}
              onChange={handleInputChange}
              placeholder="Enter any additional notes"
              className="px-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        {/* Submit Button */}
        <div className="flex justify-center mt-4">
          <button
            type="submit"
            className="bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
          >
            Submit
          </button>
        </div>
      </form>
      <br></br>
    </div>
  );
};

export default InterviewBatchForm;

// File: components/ManageProfile.jsx
import React, { useState, useEffect } from 'react';

const ManageProfile = () => {
  const [profileData, setProfileData] = useState({
    companyName: '',
    username: '',
    email: ''
  });

  useEffect(() => {
    // Fetch user data from local storage or API
    const fetchProfileData = () => {
      const companyName = localStorage.getItem('companyName');
      const username = localStorage.getItem('username');
      const email = localStorage.getItem('email'); // Assuming email is stored in local storage
      setProfileData({ companyName, username, email });
    };

    fetchProfileData();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setProfileData({ ...profileData, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle form submission, update profile data in local storage or via API
    console.log('Profile data submitted:', profileData);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Manage Profile</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label htmlFor="companyName" className="block text-gray-700 font-bold mb-2">Company Name</label>
          <input
            type="text"
            id="companyName"
            name="companyName"
            value={profileData.companyName}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="username" className="block text-gray-700 font-bold mb-2">Username</label>
          <input
            type="text"
            id="username"
            name="username"
            value={profileData.username}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="email" className="block text-gray-700 font-bold mb-2">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={profileData.email}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
          />
        </div>
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">Save Changes</button>
      </form>
    </div>
  );
};

export default ManageProfile;

// File: pages/BatchCard.jsx
import React from 'react'

import InterviewBatchCard from '../components/InterviewBatchCard'


export const BatchCard = () => {
  return (
    <> <div>
      
    </div>
    <div>
        <InterviewBatchCard/>
      
        </div>
        </>
   
  )
}


// File: pages/BatchForm.jsx
import React from 'react'


import InterviewBatch from '../components/InterviewBatchForm'

import Footer from '../components/footer'

export const BatchForm = () => {
  return (
    <> <div>
      
    </div>
    <div>
      <InterviewBatch/>   
        </div>
        <Footer/>
        </>
   
  )
}


// File: pages/Home.jsx
import React from 'react'

export const Home = () => {
  return (
    <div>Home</div>
  )
}

// File: pages/Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Logo from "../assets/logo.png";
import Pattern from "../assets/pattern.png";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const API_BASE = 'http://localhost:3000';

const Login = ({ setIsAuthenticated }) => {
  const navigate = useNavigate();

  // State for login
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // State for signup
  const [companyName, setCompanyName] = useState('');
  const [companyType, setCompanyType] = useState('');
  const [username, setUsername] = useState('');
  const [signupEmail, setSignupEmail] = useState('');
  const [signupPassword, setSignupPassword] = useState('');

  const [isLogin, setIsLogin] = useState(true);
  const [visible, setVisible] = useState(false);

  // Switch between login and signup forms
  const switchSection = () => {
    setVisible(true);
    setTimeout(() => {
      setVisible(false);
      setIsLogin(!isLogin);
    }, 250);
  };

  // Handle signup form submission
  const signUp = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${API_BASE}/api/account/signup`, {
        companyName,
        companyType,
        username,
        email: signupEmail,
        password: signupPassword
      });
      const { data } = response;
      if (data.token) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('username', data.username);
        localStorage.setItem('companyName', data.companyName); // Store company name
        setIsAuthenticated(true);
        navigate('/form');
        toast.success('Signup successful!');
      } else {
        console.error('Unexpected response:', data);
        toast.error('Unexpected response');
      }
    } catch (error) {
      console.error('Error during signup:', error);
      toast.error('Error during signup');
    }
  };

  // Handle login form submission
  const signIn = async (e) => {
    e.preventDefault();
    try {
      const { data } = await axios.post(`${API_BASE}/api/account/signin`, { email, password });
      if (data.token) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('username', data.username);
        localStorage.setItem('companyName', data.companyName); // Store company name
        setIsAuthenticated(true);
        navigate('/form');
        toast.success('Login successful!');
      }
    } catch (error) {
      console.error('Error during signin:', error);
      toast.error('Invalid credentials');
    }
  };

  return (
    <div className={visible ? "fade-in flex items-center justify-center min-h-screen bg-gradient opacity-0" : "fade-out flex items-center justify-center min-h-screen bg-slate-100"}>
      <img src={Pattern} className="absolute z-0 object-cover w-full h-full opacity-20" />
      <div className="relative flex flex-col m-6 space-y-8 bg-white shadow-2xl rounded-2xl md:flex-row md:space-y-0 text-gray-700 w-full max-w-md">
        <div className="flex flex-col justify-center p-8 md:p-14 w-full">
          <img src={Logo} className='w-40 mb-3' />
          {isLogin ? (
            <>
              <span className="mb-3 text-4xl font-bold">Welcome back</span>
              <span className="font-light text-gray-400 mb-4">
                Welcome back! Please enter your details
              </span>
              <form onSubmit={signIn}>
                <div className="py-4">
                  <span className="mb-2 text-md">Email</span>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md placeholder:font-light placeholder:text-gray-500"
                    name="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
                <div className="py-4">
                  <span className="mb-2 text-md">Password</span>
                  <input
                    type="password"
                    name="password"
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-md placeholder:font-light placeholder:text-gray-500"
                  />
                </div>
                <div className="flex justify-center w-full py-4">
                  <span className="font-bold text-md">Forgot password</span>
                </div>
                <button
                  className="w-full bg-teal-blue text-white p-2 rounded-lg mb-6 border hover:border-gray-300 hover:bg-dark-blue"
                  type='submit'
                >
                  Sign in
                </button>
              </form>
              <div className="text-center text-gray-400">
                Don't have an account?
                <button className="font-bold text-teal-blue" onClick={switchSection}> Sign up</button>
              </div>
            </>
          ) : (
            <>
              <span className="mb-3 text-4xl font-bold">New here?</span>
              <span className="font-light text-gray-400 mb-8">
                Sign up now and let's get started!
              </span>
              <form onSubmit={signUp}>
                <div className="py-2">
                  <span className="mb-2 text-md">Company Name</span>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md placeholder:font-light placeholder:text-gray-500"
                    name="companyName"
                    id="companyName"
                    value={companyName}
                    onChange={(e) => setCompanyName(e.target.value)}
                  />
                </div>
                <div className="py-2">
                  <span className="mb-2 text-md">Company Type</span>
                  <select
                    className="w-full p-2 border border-gray-300 rounded-md placeholder:font-light placeholder:text-gray-500"
                    name="companyType"
                    id="companyType"
                    value={companyType}
                    onChange={(e) => setCompanyType(e.target.value)}
                  >
                    <option value="">Select Company Type</option>
                    <option value="Private">Private</option>
                    <option value="Startup">Startup</option>
                    <option value="Public">Public</option>
                    <option value="Non-Profit">Non-Profit</option>
                    <option value="Government">Government</option>
                  </select>
                </div>
                <div className="py-2">
                  <span className="mb-2 text-md">Username</span>
                  <div className='flex'>
                    <input
                      type="text"
                      className="w-full p-2 border border-gray-300 rounded-s-md placeholder:font-light placeholder:text-gray-500"
                      name="username"
                      id="username"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                    />
                  </div>
                </div>
                <div className="py-2">
                  <span className="mb-2 text-md">Email</span>
                  <div className='flex'>
                    <input
                      type="text"
                      className="w-full p-2 border border-gray-300 rounded-s-md placeholder:font-light placeholder:text-gray-500"
                      name="signupEmail"
                      id="signupEmail"
                      value={signupEmail}
                      onChange={(e) => setSignupEmail(e.target.value)}
                    />
                  </div>
                </div>
                <div className="py-2 pb-10">
                  <span className="mb-2 text-md">Password</span>
                  <input
                    type="password"
                    name="signupPassword"
                    id="signupPassword"
                    value={signupPassword}
                    onChange={(e) => setSignupPassword(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-md placeholder:font-light placeholder:text-gray-500"
                  />
                </div>
                <button
                  className="w-full bg-teal-blue text-white p-2 rounded-lg mb-6 border hover:border-gray-300 hover:bg-dark-blue"
                  type='submit'
                >
                  Sign up
                </button>
                <div className="text-center text-gray-400">
                  Already have an account?
                  <button className="font-bold text-teal-blue" onClick={switchSection}> Log In</button>
                </div>
              </form>
            </>
          )}
        </div>
      </div>
      <ToastContainer position="bottom-right" autoClose={3000} />
    </div>
  );
};

export default Login;

